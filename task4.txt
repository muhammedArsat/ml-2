from os import access
import pandas as pd
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import cv2 as cv
from tensorflow.python.keras import activations
from tensorflow.python.keras.activations import softmax
from tensorflow.python.keras.metrics import accuracy

data = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = data.load_data()

x_train = tf.keras.utils.normalize(x_train, axis=1)
x_test = tf.keras.utils.normalize(x_test, axis=1)

model = tf.keras.models.Sequential()  
model.add(tf.keras.layers.Flatten(input_shape=(28, 28)))
model.add(tf.keras.layers.Dense(units=128, activation=tf.nn.relu))  
model.add(tf.keras.layers.Dense(units=128, activation=tf.nn.relu))

model.add(tf.keras.layers.Dense(units=10, activation=tf.nn.softmax))

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

model.fit(x_train, y_train, epochs=3)

loss, accuracy = model.evaluate(x_test, y_test)
print(f"Accuracy: {accuracy}")
print(f"Loss: {loss}")


for x in range(5, 11):
    img = cv.imread(r'C:\\Users\\Student\\Documents\\ml-4\\data_to_test\\IMG-20241111-WA0010.jpg', cv.IMREAD_GRAYSCALE)

    img = cv.resize(img, (28, 28))  
    img = np.invert(np.array([img]))  
    img = img.reshape(1, 28, 28)  
    prediction = model.predict(img)
    print("--------------------")
    print("The predicted output is: ", np.argmax(prediction))
    print("--------------------")
    plt.imshow(img[0], cmap=plt.cm.binary)
    plt.show()